support.README = {{

This namespace contains some types and functions that would ideally provided by the Unison runtime or a/the (standard) library.

# Integer

{type Integer} provides support for signed arbitrary precision integers, but only brings the minimum functionality that is required by the Dhall specification.

# Single and Half float encodings

The CBOR binary encoding requires that floats are stored in the shortest encoding that preserves the value.

{encodeFloat} will encode a float into the appropriate 16-bit, 32-bit or 64-bit IEEE 754 representation.

}}


support.encodeFloat : Float -> Bytes
support.encodeFloat f =
  doubleRepresentation = Float.toRepresentation f
  -- bit 0
  sign = (Nat.shiftRight doubleRepresentation 63)
  -- bits 1 - 11, bias = 1023
  unbiasedExponent = Nat.shiftRight (Nat.shiftLeft doubleRepresentation 1) 53
  fractionBits = Nat.shiftRight (Nat.shiftLeft doubleRepresentation 12) 12
  -- special cases
  match (unbiasedExponent, fractionBits) with
    (0, 0) -> -- signed null => HALF
      Bytes.encodeNat16be (Nat.shiftLeft sign 15)
    (0, _) -> -- subnormals => Double
      Bytes.encodeNat64be doubleRepresentation
    (0x7ff, 0) -> -- signed infinity => HALF
      Bytes.encodeNat16be ((Nat.shiftLeft sign 15) + 0x7c00)
    (0x7ff, _) -> -- NaN => Half
      Bytes.encodeNat16be (0x7e00)
    (_, _) ->
      exponent = (Nat.toInt unbiasedExponent) - (+1023)
      if ((exponent Int.>= -14) && (exponent Int.<= +15) && ((Nat.shiftLeft (Nat.shiftRight fractionBits 42) 42) == fractionBits))
        then -- fits in HALF
          halfUnbiasedExponent = Int.truncate0 (exponent + +15)
          halfFractionBits = Nat.shiftRight fractionBits 42
          Bytes.encodeNat16be ((Nat.shiftLeft sign 15) + (Nat.shiftLeft halfUnbiasedExponent 10) + halfFractionBits)
        else if ((exponent Int.>= -126) && (exponent Int.<= +127) && ((Nat.shiftLeft (Nat.shiftRight fractionBits 29) 29) == fractionBits))
          then -- fits in single precision float
            singleUnbiasedExponent = Int.truncate0 (exponent + +127)
            singleFractionBits = Nat.shiftRight fractionBits 29
            Bytes.encodeNat32be ((Nat.shiftLeft sign 31) + (Nat.shiftLeft singleUnbiasedExponent 23) + singleFractionBits)
          else
            Bytes.encodeNat64be doubleRepresentation


support.infinity = Float.Infinity
support.negInfinity = Float.NegativeInfinity
support.nan = NaN

-- --  2 bytes -> half float
support.parseHalfFloat : Bytes -> Optional Float
support.parseHalfFloat bytes =
  decodeNat : Nat -> Float
  decodeNat n =
    sign = Nat.shiftRight n 15
    unbiasedExponent = Nat.shiftRight (Nat.shiftLeft n 49) 59
    fractionBits = Nat.shiftRight (Nat.shiftLeft n 54) 54
    match (unbiasedExponent, fractionBits) with
      (0, 0) -> -- signed null
        if sign == 1 then -0.0 else 0.0
      (0, _) -> -- subnormals => Double
        match findFractionExponentHalf fractionBits with
          (fraction, expD) ->
            exp = 1009 - expD
            Float.fromRepresentation ((Nat.shiftLeft sign 63) + (Nat.shiftLeft exp 52) + (Nat.shiftLeft fraction 42))
      (0x1f, 0) -> -- signed infinity
        if sign == 1 then negInfinity else infinity
      (0x1f, _) -> -- NaN => Half
        nan
      (_, _) ->
        doubleUnbiasedExponent = Nat.shiftLeft (unbiasedExponent + 1008) 52 -- 1008 = (- 15 + 1023)
        doubleFractionBits = Nat.shiftLeft fractionBits 42
        Float.fromRepresentation ((Nat.shiftLeft sign 63) + doubleUnbiasedExponent + doubleFractionBits)
  Optional.map (compose decodeNat Tuple.at1) (Bytes.decodeNat16be bytes)

--  4 bytes -> (single) float
support.parseSingleFloat : Bytes -> Optional Float
support.parseSingleFloat bytes =
  decodeNat : Nat -> Float
  decodeNat n =
    sign = Nat.shiftRight n 31
    unbiasedExponent = Nat.shiftRight (Nat.shiftLeft n 33) 56
    fractionBits = Nat.shiftRight (Nat.shiftLeft n 41) 41
    match (unbiasedExponent, fractionBits) with
      (0, 0) -> -- signed null
        if sign == 1 then -0.0 else 0.0
      (0, _) -> -- subnormals => Double
        match findFractionExponentSingle fractionBits with
          (fraction, expD) ->
            exp = 897 - expD
            Float.fromRepresentation ((Nat.shiftLeft sign 63) + (Nat.shiftLeft exp 52) + (Nat.shiftLeft fraction 29))
      (0x1f, 0) -> -- signed infinity
        if sign == 1 then negInfinity else infinity
      (0x3ff, _) -> -- NaN
        nan
      (_, _) ->
        doubleUnbiasedExponent = Nat.shiftLeft (unbiasedExponent + 896) 52  -- 896 = (- 127 + 1023)
        doubleFractionBits = Nat.shiftLeft fractionBits 29
        Float.fromRepresentation ((Nat.shiftLeft sign 63) + doubleUnbiasedExponent + doubleFractionBits)
  Optional.map (compose decodeNat Tuple.at1) (Bytes.decodeNat32be bytes)


support.parseFloat : Bytes -> Optional Float
support.parseFloat bytes = match Bytes.size bytes with
  8 ->  Optional.map (compose Float.fromRepresentation Tuple.at1) (Bytes.decodeNat64be bytes)
  4 ->  parseSingleFloat bytes
  2 ->  parseHalfFloat bytes
  _ -> None

-- shift 10 bit fraction to the left until the leading bit is removed, return shifted fraction and number of shifts
support.findFractionExponentHalf : Nat -> (Nat, Nat)
support.findFractionExponentHalf = findFractionExponent 54

support.findFractionExponentSingle : Nat -> (Nat, Nat)
support.findFractionExponentSingle = findFractionExponent 41

support.findFractionExponent : Nat -> Nat -> (Nat, Nat)
support.findFractionExponent prefix n =
  p1 = prefix + 1
  go : Nat -> Nat -> (Nat, Nat)
  go n c =
    n' = Nat.shiftRight (Nat.shiftLeft n p1) p1
    if (n' Nat.!=  n
    then (Nat.shiftLeft n' 1, c + 1)
    else go (Nat.shiftLeft n 1) (c + 1)
  go n 0

use test

test> support.findFractionExponentHalf.tests.ex1 = check((findFractionExponentHalf 0x03FF) === (0x03FE, 1))

support.stableEncoding: Nat -> Boolean
support.stableEncoding n =
  f = Float.fromRepresentation n
  enc = encodeFloat f
  ddenc = Optional.map encodeFloat (parseFloat enc)
  if ddenc === (Some enc) then
    true
  else
    Debug.watch ("missmatch for n = " ++ (Nat.toText n)) false

test> support.parseFloat.test.props1 =
  runs 1000 '(expect (!gen.nat |> stableEncoding))
test> support.parseFloat.test.ex2 = check (stableEncoding 0xbfc01000)
test> support.parseFloat.test.ex3 = check (stableEncoding 18446744073709551615)

unique type support.Integer = Integer Boolean Natural

support.Integer.positive : Natural -> Integer
support.Integer.positive n = Integer false n

support.Integer.negative : Natural -> Integer
support.Integer.negative n = if n == zero then Integer false zero else Integer true n

support.Integer.negate : Integer -> Integer
support.Integer.negate = cases
  (Integer sign n)
    | n == zero -> (Integer false zero)
    | otherwise -> (Integer (not sign) n)

support.Integer.clamp : Integer -> Natural
support.Integer.clamp = cases
  Integer false n -> n
  _ -> zero

support.Integer.toDouble : Integer -> Float
support.Integer.toDouble = cases
  Integer false n -> Optional.getOrElse nan (Float.fromText (Natural.toDecimalText n))
  Integer true n -> Optional.getOrElse nan (Float.fromText ("-" ++ Natural.toDecimalText n))

support.Integer.toText : Integer -> Text
support.Integer.toText = cases
  Integer false n -> "+" ++ (Natural.toDecimalText n)
  Integer true n -> "-" ++ (Natural.toDecimalText n)

support.naturalToFloat : Natural -> Float
support.naturalToFloat = cases
  n | n == zero -> 0.0
     | otherwise ->
        use Optional
        ns = digits n
        nz = size ns
        lne = Nonempty (Nonempty.last ns) []
        last2 = match List.last (Nonempty.init ns) with
          None -> lne
          Some b -> Nonempty.cons b lne
        f = match naturalToNat (internal.Natural last2) with
          Some x -> Nat.toFloat x
        -- f
        f * Float.pow 2.0 (Nat.toFloat (32 * (nz - 2)))

support.naturalToNat : Natural -> Optional Nat
support.naturalToNat n = match digits n with
    Nonempty a []  -> Some a
    Nonempty a [b] ->
      use Nat +
      Some (a + Nat.shiftLeft b 32)
    _              -> None

-- YYYY-MM-DD
unique type support.Date = Date Nat Nat Nat
-- hh mm (ss*10^precision) precision
unique type support.Time = Time Nat Nat Nat Nat
--  timezone in minutes
unique type support.TimeZone = TimeZone Int
