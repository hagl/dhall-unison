use support
use syntax TextLiteral
use syntax.TextLiteral Chunks
use syntax.Constant
use syntax Expression
use syntax.Expression Lambda Forall Let Variable If Merge ToMap EmptyList NonEmptyList Annotation Operator Application Field ProjectByLabels ProjectByType Completion Assert With DoubleLiteral NaturalLiteral IntegerLiteral TextLiteral RecordType RecordLiteral UnionType DateLiteral TimeLiteral TimeZoneLiteral Operator Builtin Constant DhallSome
use List Nonempty

syntax.addTextToTextLiteral : Text -> TextLiteral -> TextLiteral
syntax.addTextToTextLiteral t = cases (Chunks l x) -> Chunks l (x Text.++ t)

(syntax.TextLiteral.<>) : TextLiteral -> TextLiteral -> TextLiteral
tl1 syntax.TextLiteral.<> tl2 = match tl1 with
  Chunks xys0 z0 -> match tl2 with
    Chunks xys1 z1 -> match uncons xys1 with
      None -> Chunks xys0 (z0 Text.++ z1)
      Optional.Some ((x1, y1), t) -> Chunks (xys0 List.++ ((z0 Text.++ x1, y1) List.+: t)) z1

--
syntax.addExpresionToTextLiteral : syntax.Expression -> TextLiteral -> TextLiteral
syntax.addExpresionToTextLiteral e = cases (Chunks l x) -> Chunks (l List.++ [(x, e)]) ""

-- | Same as @Data.Text.splitOn@, except always returning a `NonEmpty` result
syntax.splitOn : Char -> Text -> Nonempty Text
syntax.splitOn needle haystack =
    match Text.split needle haystack with
        []     -> "" +| []
        t +: ts -> t +| ts

-- -- | Split `Chunks` by lines
syntax.linesLiteral : TextLiteral -> Nonempty TextLiteral
syntax.linesLiteral = cases
  (Chunks [] suffix) -> Nonempty.map (t -> Chunks [] t) (splitOn ?\n suffix)
  (Chunks ((prefix, interpolation) +: pairs0) suffix0) ->
    splitLines = splitOn ?\n prefix
    initLines = Nonempty.init splitLines
    lastLine  = Nonempty.last splitLines
    match linesLiteral (Chunks pairs0 suffix0) with
      Nonempty (Chunks pairs1 suffix1) chunks ->
        List.foldRight
            Nonempty.cons
            ((Chunks ((lastLine, interpolation) +: pairs1) suffix1) +| chunks)
            (List.map (t -> Chunks [] t) initLines)


-- -- | Flatten several `Chunks` back into a single `Chunks` by inserting newlines
syntax.unlinesLiteral : Nonempty TextLiteral -> TextLiteral
syntax.unlinesLiteral chunks =
  Nonempty.reduceLeft (chunk1 chunk2 -> chunk1 <> (Chunks [] "\n") <> chunk2) chunks

-- -- | Returns `True` if the `Chunks` represents a blank line
syntax.emptyLine : TextLiteral -> Boolean
syntax.emptyLine = cases
  (Chunks [] ""  ) -> true
  (Chunks [] "\r") -> true  -- So that `\r\n` is treated as a blank line
  _ -> false

-- | Return the leading whitespace for a `Chunks` literal
syntax.leadingSpaces : TextLiteral -> [Char]
syntax.leadingSpaces chunks =
  isSpace c = (c == ?\s) || (c == ?\t)
  firstText = match chunks with
    Chunks [] suffix -> suffix
    Chunks ((prefix, _) +: _ ) _ -> prefix
  (List.takeWhile isSpace (Text.toCharList firstText))

-- {-| Compute the longest shared whitespace prefix for the purposes of stripping
--     leading indentation
-- -}
syntax.longestSharedWhitespacePrefix : Nonempty TextLiteral -> [Char]
syntax.longestSharedWhitespacePrefix literals =
    -- The standard specifies to filter out blank lines for all lines *except*
    -- for the last line
    oldLast = Nonempty.last literals
    oldInit = Nonempty.init literals
    newInit =  filter (compose not emptyLine) oldInit
    filteredLines = newInit :+ oldLast

    sharedPrefix : [Char] ->{} [Char] ->{} [Char]
    sharedPrefix ab ac =
      if List.isPrefixOf ab ac then ab else
        List.map Tuple.at1 (List.takeWhile (cases (a,b) -> a Char.== b) (List.zip ab ac))

    match List.map leadingSpaces filteredLines with
        (l +: ls) -> List.foldLeft sharedPrefix l ls
        []     -> []

syntax.dropLiteral : Nat -> TextLiteral -> TextLiteral
syntax.dropLiteral n = cases
  (Chunks [] suffix) -> Chunks [] (Text.drop n suffix)
  (Chunks ((prefix, interpolation) +: rest) suffix) -> Chunks ((Text.drop n prefix, interpolation) +: rest) suffix

-- {-| Convert a single-quoted `Chunks` literal to the equivalent double-quoted
--     `Chunks` literal
-- -}
syntax.toDoubleQuoted : TextLiteral -> TextLiteral
syntax.toDoubleQuoted literal =
    literals = linesLiteral literal
    longestSharedPrefix = longestSharedWhitespacePrefix literals
    indent = List.size longestSharedPrefix
    unlinesLiteral (Nonempty.map (dropLiteral indent) literals)

syntax.reservedKeywords : Set Text
syntax.reservedKeywords = (Set.fromList
  [ "if"
  , "then"
  , "else"
  , "let"
  , "in"
  , "using"
  , "missing"
  , "as"
  , "Infinity"
  , "NaN"
  , "merge"
  , "Some"
  , "toMap"
  , "assert"
  , "forall"
  , "with"
  , "showConstructor"
  ])

-- | The set of reserved identifiers for the Dhall language
-- | Contains also all keywords from "reservedKeywords"
syntax.reservedIdentifiers : Set Text
syntax.reservedIdentifiers = Set.union reservedKeywords (Set.fromList
  [ -- Builtins according to the `builtin` rule in the grammar
    "Natural/fold"
  , "Natural/build"
  , "Natural/isZero"
  , "Natural/even"
  , "Natural/odd"
  , "Natural/toInteger"
  , "Natural/show"
  , "Natural/subtract"
  , "Integer"
  , "Integer/clamp"
  , "Integer/negate"
  , "Integer/show"
  , "Integer/toDouble"
  , "Integer/show"
  , "Natural/subtract"
  , "Double/show"
  , "List/build"
  , "List/fold"
  , "List/length"
  , "List/head"
  , "List/last"
  , "List/indexed"
  , "List/reverse"
  , "Text/replace"
  , "Text/show"
  , "Bool"
  , "True"
  , "False"
  , "Optional"
  , "None"
  , "Natural"
  , "Integer"
  , "Double"
  , "Text"
  , "Date"
  , "Time"
  , "TimeZone"
  , "List"
  , "Type"
  , "Kind"
  , "Sort"
  ])

syntax.filterExpressions : (Expression -> Boolean) -> Expression -> [Expression]
syntax.filterExpressions p expression =
  go : Expression -> [Expression]
  go ex =
    f = List.filter p
    (if p ex then [ex]  else [])  ++
    match ex with
      Lambda x A b -> f [A, b]
      Forall x A B -> f [A, B]
      Let x t a b-> f (Optional.toList t ++ [a, b])
      If t l r -> f [t, l, r]
      Merge t u ot -> f (Optional.toList ot ++ [t, u])
      ToMap t ot -> f (Optional.toList ot ++ [t])
      EmptyList T -> f [T]
      NonEmptyList ts -> f (Nonempty.toList ts)
      Annotation t T -> f [t, T]
      Operator l op r -> f [l, r]
      Application a b -> f [a, b]
      Field t y -> f [t]
      ProjectByLabels t xs -> f [t]
      ProjectByType t T -> f [t, T]
      Completion T r -> f [T, r]
      Assert T -> f [T]
      With e ks v -> f [e, v]
      TextLiteral (Chunks xys z) -> f (List.map Tuple.at2 xys)
      RecordType ks -> f (List.map Tuple.at2 ks)
      RecordLiteral ks -> f (List.map Tuple.at2 ks)
      UnionType ks -> f (List.filterMap Tuple.at2 ks)
      DhallSome a -> f [a]
      _ -> []
  go expression
