use syntax.TextLiteral Chunks
use syntax.Constant
use syntax Expression
use syntax.Expression Lambda Forall Let Variable If Merge ToMap EmptyList NonEmptyList Annotation Operator Application Field ProjectByLabels ProjectByType Completion Assert With DoubleLiteral NaturalLiteral IntegerLiteral TextLiteral RecordType RecordLiteral UnionType DateLiteral TimeLiteral TimeZoneLiteral Operator Builtin Constant DhallSome Import

alpha_normalization.alphaNormalize: Expression -> Expression
alpha_normalization.alphaNormalize = cases
  Lambda "_" A0 b0 -> Lambda "_" (alphaNormalize A0) (alphaNormalize b0)
  Lambda x A0 b0 ->
    b1 = shift +1 "_" 0 b0
    b2 = substitute b1 x 0 (Variable "_" 0)
    b3 = shift -1 x 0 b2
    Lambda "_" (alphaNormalize A0) (alphaNormalize (b3))
  Forall "_" A0 B0 -> Forall "_" (alphaNormalize A0) (alphaNormalize B0)
  Forall x A0 B0 ->
    B1 = shift +1 "_" 0 B0
    B2 = substitute B1 x 0 (Variable "_" 0)
    B3 = shift -1 x 0 B2
    Forall "_" (alphaNormalize A0) (alphaNormalize B3)
  Let "_" t a0 b0 -> Let "_" (Optional.map alphaNormalize t) (alphaNormalize a0) (alphaNormalize b0)
  Let x t a0 b0 ->
    b1 = shift +1 "_" 0 b0
    b2 = substitute b1 x 0 (Variable "_" 0)
    b3 = shift -1 x 0 b2
    Let "_" (Optional.map alphaNormalize t) (alphaNormalize a0) (alphaNormalize b3)
  Variable x n -> Variable x n
  If t0 l0 r0 -> If (alphaNormalize t0) (alphaNormalize l0) (alphaNormalize r0)
  Merge t0 u0 t -> Merge (alphaNormalize t0) (alphaNormalize u0) (Optional.map alphaNormalize t)
  ToMap t0 t -> ToMap (alphaNormalize t0)(Optional.map alphaNormalize t)
  EmptyList T0 -> EmptyList (alphaNormalize T0)
  NonEmptyList ts0 -> NonEmptyList (Nonempty.map alphaNormalize ts0)
  Annotation t0 T0 -> Annotation (alphaNormalize t0) (alphaNormalize T0)
  Operator l0 op r0 -> Operator (alphaNormalize l0) op (alphaNormalize r0)
  Application f0 a0 -> Application (alphaNormalize f0) (alphaNormalize a0)
  Field t0 y -> Field (alphaNormalize t0) y
  ProjectByLabels t0 xs -> ProjectByLabels (alphaNormalize t0) xs
  ProjectByType t0 T0 -> ProjectByType (alphaNormalize t0) (alphaNormalize T0)
  Completion T0 r0 -> Completion (alphaNormalize T0) (alphaNormalize r0)
  Assert T0 -> Assert (alphaNormalize T0)
  With e0 ks v0 -> With (alphaNormalize e0) ks (alphaNormalize v0)
  DoubleLiteral d -> DoubleLiteral d
  NaturalLiteral n -> NaturalLiteral n
  IntegerLiteral n -> IntegerLiteral n
  TextLiteral (Chunks xys0 z) -> TextLiteral (Chunks (List.map (cases (s, t0) -> (s, alphaNormalize t0)) xys0) z)
  RecordType ks0 -> RecordType (List.map (cases (k, t_T0) -> (k, alphaNormalize t_T0)) ks0)
  RecordLiteral ks0 -> RecordLiteral (List.map (cases (k, t_T0) -> (k, alphaNormalize t_T0)) ks0)
  UnionType ks0 -> UnionType (List.map (cases (k, t) -> (k, Optional.map alphaNormalize t)) ks0)
  DhallSome a0 -> DhallSome (alphaNormalize a0)
  Builtin b -> Builtin b
  Constant c -> Constant c
  DateLiteral t -> DateLiteral t
  TimeLiteral t -> TimeLiteral t
  TimeZoneLiteral tz -> TimeZoneLiteral tz
use test

test> alpha_normalization.alphaNormalize.tests.ex1 = check(alphaNormalize(
  Lambda "a" (Expression.Constant Constant.Type) (
    Lambda "b" (Expression.Constant Constant.Type) (
      Lambda "x" (Variable "a" 0) (
        Lambda "y" (Variable "b" 0) (
          Variable "x" 0)))))
  ===
  Lambda "_" (Expression.Constant Constant.Type) (
    Lambda "_" (Expression.Constant Constant.Type) (
      Lambda "_" (Variable "_" 1) (
        Lambda "_" (Variable "_" 1) (
          Variable "_" 1)))))
