use syntax TextLiteral
use syntax.TextLiteral Chunks
use syntax Expression
use syntax.Expression Constant Lambda Forall Let Variable If Merge ToMap EmptyList NonEmptyList Annotation Operator Application Field ProjectByLabels ProjectByType Completion Assert With DoubleLiteral NaturalLiteral IntegerLiteral TextLiteral RecordType RecordLiteral UnionType DateLiteral TimeLiteral TimeZoneLiteral Operator Builtin
use syntax.Operator Or Plus TextAppend ListAppend And CombineRecordTerms Prefer CombineRecordTypes Times Equal NotEqual Equivalent Alternative
use syntax.Builtin NaturalBuild NaturalFold NaturalIsZero NaturalEven NaturalOdd NaturalToInteger NaturalShow NaturalSubtract IntegerToDouble IntegerShow IntegerNegate IntegerClamp DoubleShow ListBuild ListFold ListLength ListHead ListLast ListIndexed ListReverse TextShow TextReplace Bool Optional Natural Integer Double Text List True False DhallNone Date Time TimeZone

use Natural

equivalence.equivalent : Expression -> Expression -> Boolean
equivalence.equivalent e1 e2 =
  encodeNormalized e = e |> betaNormalize |> alphaNormalize |> encode |> Term.toBytes
  encodeNormalized e1 === encodeNormalized e2

beta_normalization.without: [a] -> [a] -> [a]
beta_normalization.without l r = List.filter (x -> not(x `elem` r)) l

beta_normalization.betaNormalize: Expression -> Expression
beta_normalization.betaNormalize e =
  normalized = match e with
    Constant c -> Constant c
    Variable x n -> Variable x n
    Builtin b -> Builtin b
    If t0 l0 r0 ->
      t1 = betaNormalize t0
      l1 = betaNormalize l0
      r1 = betaNormalize r0
      match (t1, l1, r1) with
        (Builtin True, _, _) -> l1
        (Builtin False, _, _) -> r1
        (_, Builtin True, Builtin False) -> t1
        _ -> if (equivalent l0 r0) then l1 else If t1 l1 r1
    Operator l0 Or r0 ->
      l1 = betaNormalize l0
      r1 = betaNormalize r0
      match (l1, r1) with
        (Builtin False, _) -> r1
        (_, Builtin False) -> l1
        (Builtin True, _) -> Builtin True
        (_, Builtin True) -> Builtin True
        _ -> if (equivalent l0 r0) then l1 else Operator l1 Or r1
    Operator l0 And r0 ->
      l1 = betaNormalize l0
      r1 = betaNormalize r0
      match (l1, r1) with
        (Builtin True, _) -> r1
        (_, Builtin True) -> l1
        (Builtin False, _) -> Builtin False
        (_, Builtin False) -> Builtin False
        _ -> if (equivalent l0 r0) then l1 else Operator l1 And r1
    Operator l0 Equal r0 ->
      l1 = betaNormalize l0
      r1 = betaNormalize r0
      match (l1, r1) with
        (Builtin True, _) -> r1
        (_, Builtin True) -> l1
        _ -> if (equivalent l0 r0) then Builtin True else Operator l1 Equal r1
    Operator l0 NotEqual r0 ->
      l1 = betaNormalize l0
      r1 = betaNormalize r0
      match (l1, r1) with
        (Builtin False, _) -> r1
        (_, Builtin False) -> l1
        _ -> if (equivalent l0 r0) then Builtin False else Operator l1 NotEqual r1
    NaturalLiteral n -> NaturalLiteral n
    Operator l0 Plus r0 ->
      l1 = betaNormalize l0
      r1 = betaNormalize r0
      match (l1, r1) with
        (NaturalLiteral n, NaturalLiteral m) -> (NaturalLiteral (n + m))
        (NaturalLiteral z, _) | isZero z -> r1
        (_, NaturalLiteral z) | isZero z -> l1
        _ -> Operator l1 Plus r1
    Operator l0 Times r0 ->
      l1 = betaNormalize l0
      r1 = betaNormalize r0
      match (l1, r1) with
        (NaturalLiteral n, NaturalLiteral m) -> NaturalLiteral (n * m)
        (NaturalLiteral z, _) | isZero z -> NaturalLiteral zero
        (_, NaturalLiteral z) | isZero z -> NaturalLiteral zero
        (NaturalLiteral n, _) | n == one -> r1
        (_, NaturalLiteral n) | n == one -> l1
        _ -> Operator l1 Times r1
    TextLiteral chunks0 ->
      loop: TextLiteral -> TextLiteral
      loop = cases
        (Chunks l z0) -> match uncons l with
          None -> (Chunks l z0)
          Optional.Some ((s0, t0), ss0) ->
            t1 = betaNormalize t0
            match t1 with
              TextLiteral chunks -> ((Chunks [] s0) <> chunks) <> (loop (Chunks ss0 z0))
              _ -> Chunks [(s0, t1)] "" <> loop (Chunks ss0 z0)
      match loop chunks0 with
        Chunks [("", t)] "" -> t
        chunks1 -> Expression.TextLiteral chunks1
    Operator l TextAppend r -> betaNormalize (Expression.TextLiteral (Chunks [("", l), ("", r)] ""))
    EmptyList T0 -> EmptyList (betaNormalize T0)
    NonEmptyList ts -> NonEmptyList (Nonempty.map betaNormalize ts)
    Operator ls0 ListAppend rs0 ->
      ls1 = betaNormalize ls0
      rs1 = betaNormalize rs0
      match (ls1, rs1) with
        (EmptyList T, _) -> rs1
        (_, EmptyList T) -> ls1
        (NonEmptyList l, NonEmptyList r) -> NonEmptyList (l ++ r)
        _ -> Operator ls1 ListAppend rs1
    RecordType xTs0 ->
      RecordType (List.sortBy Tuple.at1 (List.map (cases (x, t_T) -> (x, betaNormalize t_T)) xTs0))
    RecordLiteral xts0 ->
      RecordLiteral (List.sortBy Tuple.at1 (List.map (cases (x, t) -> (x, betaNormalize t)) xts0))
    Field t x -> betaNormalizeField t x
    ProjectByLabels _ [] -> RecordLiteral []
    ProjectByLabels t xs -> betaNormalizeProjectByLabels t xs
    ProjectByType t0 s0 -> match betaNormalize s0 with
      RecordType ss -> betaNormalize (ProjectByLabels t0 (List.map Tuple.at1 ss))
      s1 -> ProjectByType (betaNormalize t0) s1
    Operator ls0 CombineRecordTerms rs0 -> match (betaNormalize ls0, betaNormalize rs0) with
      (RecordLiteral [], rs1) -> rs1
      (ls1, RecordLiteral []) -> ls1
      (RecordLiteral xls, RecordLiteral xrs) ->
        ml = Map.fromList xls
        mr = Map.fromList xrs
        combine : Expression ->{} Expression ->{} Expression
        combine l r = Operator l CombineRecordTerms r
        betaNormalize(RecordLiteral (List.sortBy Tuple.at1 (Map.toList (Map.unionWith combine ml mr))))
      (ls1, rs1) -> Operator ls1 CombineRecordTerms rs1
    Operator ls0 Prefer rs0 -> match (betaNormalize ls0, betaNormalize rs0) with
      (RecordLiteral [], rs1) -> rs1
      (ls1, RecordLiteral []) -> ls1
      (RecordLiteral xls, RecordLiteral xrs) ->
        ml = Map.fromList xls
        mr = Map.fromList xrs
        RecordLiteral (List.sortBy Tuple.at1 (Map.toList (Map.unionWith 'id ml mr)))
      (ls1, rs1) -> if equivalent ls1 rs1 then ls1 else Operator ls1 Prefer rs1
    With e0 ks0 v0 -> match (ks0, betaNormalize e0) with
      (Nonempty k [], RecordLiteral kvs) ->
        RecordLiteral (Map.toList (Map.insert k (betaNormalize v0) (Map.fromList kvs)))
      (Nonempty k0 (k1 +: ks1), RecordLiteral kvs) -> match lookup k0 kvs with
        Optional.Some e1 ->
          e2 = betaNormalize (With e1 (k1 +| ks1) v0)
          RecordLiteral (Map.toList (Map.insert k0 e2 (Map.fromList kvs)))
        None ->
          e1 = betaNormalize (With (RecordLiteral[]) (k1 +| ks1) v0)
          RecordLiteral (Map.toList (Map.insert k0 e1 (Map.fromList kvs)))
      (_, e1) -> With e1 ks0 (betaNormalize v0)
    Operator ls0 CombineRecordTypes rs0 -> match (betaNormalize ls0, betaNormalize rs0) with
      (RecordType [], rs1) -> rs1
      (ls1, RecordType []) -> ls1
      (RecordType xls, RecordType xrs) ->
        ml = Map.fromList xls
        mr = Map.fromList xrs
        combine : Expression ->{} Expression ->{} Expression
        combine l r = Operator l CombineRecordTypes r
        betaNormalize(RecordType (List.sortBy Tuple.at1 (Map.toList (Map.unionWith combine ml mr))))
      (ls1, rs1) -> Operator ls1 CombineRecordTypes rs1
    ToMap t0 None -> match betaNormalize t0 with
      RecordLiteral (xv +: xvs) ->
        adapt = cases (x,v) -> RecordLiteral [("mapKey", Expression.TextLiteral (Chunks [] x)), ("mapValue", v)]
        NonEmptyList (Nonempty.map adapt (xv +| xvs))
      t1 -> ToMap t1 None
    ToMap t0 (Optional.Some T0) -> match betaNormalize t0 with
      RecordLiteral (xv +: xvs) ->
        adapt = cases (x,v) -> RecordLiteral [("mapKey", Expression.TextLiteral (Chunks [] x)), ("mapValue", v)]
        NonEmptyList (Nonempty.map adapt (xv +| xvs))
      RecordLiteral [] -> EmptyList T0
      t1 -> ToMap t1 (Optional.Some (betaNormalize T0))
    Completion T r -> betaNormalize (Annotation (Operator (Field T "default") Prefer r) (Field T "Type"))
    UnionType xTs0 -> UnionType (List.map (cases (x, t) -> (x, Optional.map betaNormalize t)) xTs0)
    Merge t0 u0 T -> match (betaNormalize t0, betaNormalize u0) with
      (RecordLiteral xvs, Application (Field (UnionType _xTs₀) x) a) ->
        match lookup x xvs with
          Optional.Some f -> betaNormalize (Application f a)
      (RecordLiteral xvs, Field (UnionType _xTs₀) x) ->
        match lookup x xvs with
          Optional.Some v -> v
      (RecordLiteral xvs, DhallSome a) ->
        match lookup "Some" xvs with
          Optional.Some f -> betaNormalize (Application f a)
      (RecordLiteral xvs, Application (Builtin DhallNone) _) ->
        match lookup "None" xvs with
          Optional.Some v -> v
      (t1, u1) -> Merge t1 u1 (Optional.map betaNormalize T)
    IntegerLiteral n -> IntegerLiteral n
    DoubleLiteral n -> DoubleLiteral n
    DateLiteral d -> DateLiteral d
    TimeLiteral t -> TimeLiteral t
    TimeZoneLiteral z -> TimeZoneLiteral z
    Forall x A0 B0 -> Forall x (betaNormalize A0) (betaNormalize B0)
    Lambda x A0 b0 -> Lambda x (betaNormalize A0) (betaNormalize b0)
    Let x _ a0 b0 ->
      a1 = shift +1 x zero a0
      b1 = substitute b0 x zero a1
      b2 = shift -1 x zero b1
      betaNormalize b2
    Annotation t0 _T -> betaNormalize t0
    Assert T0 -> Assert (betaNormalize T0)
    Operator x0 Equivalent y0 -> Operator (betaNormalize x0) Equivalent (betaNormalize y0)
    Application f g ->
      betaNormalizeApplication f g
    DhallSome t0 -> DhallSome (betaNormalize t0)
  normalized

beta_normalization.betaNormalizeApplication : Expression -> Expression -> Expression
beta_normalization.betaNormalizeApplication f a =
  match (betaNormalize f, a, betaNormalize a) with
  (Builtin NaturalBuild, g, _) -> betaNormalize (
    Application
      (Application
          (Application g (Builtin Natural))
          (Lambda "x" (Builtin Natural)
              (Operator (Variable "x" zero) Plus (NaturalLiteral one))
          )
      )
      (NaturalLiteral zero)
    )

  (Application
    (Application
      (Application
        (Builtin NaturalFold)
        (NaturalLiteral m)
      )
      B
    )
    g, b, b') -> if (Natural.isZero m)
      then b'
      else betaNormalize (
        Application g
          (Application
            (Application
              (Application
                (Application (Builtin NaturalFold)
                  (NaturalLiteral (m - one))
                )
                B
              )
              g
            )
            b
          )
        )

  (Builtin NaturalIsZero, _, a') -> if a' === NaturalLiteral zero then Builtin True else Builtin False

  (Builtin NaturalEven, _, NaturalLiteral m) -> if mod m (one+one) === (Some zero) then Builtin True else Builtin False
  (Builtin NaturalOdd, _, NaturalLiteral m) -> if mod m (one+one) === (Some one) then Builtin True else Builtin False
  (Builtin NaturalToInteger, _, NaturalLiteral m) -> IntegerLiteral (Integer.positive m)
  (Builtin NaturalShow, _, NaturalLiteral n) -> Expression.TextLiteral (Chunks [] (Natural.toDecimalText n))
  (Application (Builtin NaturalSubtract) a, _, NaturalLiteral n) -> match betaNormalize a with
    NaturalLiteral m | m <= n -> NaturalLiteral (n - m)
    NaturalLiteral m | n < m -> NaturalLiteral zero
    NaturalLiteral m | m == zero -> NaturalLiteral n
    a1 -> if (n == zero) then NaturalLiteral zero else Application (Application (Builtin NaturalSubtract) a1) (NaturalLiteral n)
  (Application (Builtin NaturalSubtract) a, b, b') ->
    if equivalent a b
      then NaturalLiteral zero
      else match (betaNormalize a) with
        NaturalLiteral m | m == zero -> b'
        a' -> Application (Application (Builtin NaturalSubtract) a') b'
  (Builtin TextShow, _, TextLiteral (Chunks [] s0)) -> Expression.TextLiteral (Chunks [] (escapeText s0))
  (Application
        (Application (Builtin TextReplace) (TextLiteral (Chunks [] "")))
        _replacement, _, a) -> a
  (Application
        (Application (Builtin TextReplace) (TextLiteral (Chunks [] needle)))
        replacement, _,
        TextLiteral (Chunks [] haystack)) ->
          loop : [Text] -> TextLiteral
          loop list = match uncons list with
            None -> Chunks [] ""
            Optional.Some (s, []) -> Chunks [] s
            Optional.Some (s, ss) ->
              match loop ss with
                Chunks xys z -> Chunks ((s, replacement) +: xys) z
          betaNormalize(Expression.TextLiteral (loop (splitOn needle haystack)))
  (Application (Builtin ListBuild) A0, g, _) ->
    betaNormalize
      (Application
        (Application
          (Application g (Application (Builtin List) A0))
          (Lambda "a" A0
            (Lambda "as" (Application (Builtin List) (shift +1 "a" zero A0))
              (Operator
                (NonEmptyList (Nonempty (Variable "a" zero) []))
                ListAppend
                (Variable "as" zero)
              )
              )
            )
          )
          (EmptyList (Application (Builtin List) A0)))
  (Application
        (Application
            (Application
                (Application (Builtin ListFold) A0)
                (EmptyList A1)
            )
            _B
        ) _g, _, b1) -> b1
  (Application
        (Application
            (Application
                (Application (Builtin ListFold) A0)
                (NonEmptyList (Nonempty a as))
            )
            B
        )
        g, b0, _) ->
          rest = match List.nonempty as with
            Optional.Some nel -> NonEmptyList nel
            None -> EmptyList A0
          betaNormalize
            (Application
              (Application g a)
              (Application
                (Application
                  (Application
                    (Application
                      (Application (Builtin ListFold) A0)
                        rest
                      )
                      B
                    )
                    g
                  )
                  b0
                )
              )
  (Application (Builtin ListLength) A0, _, EmptyList A1) -> NaturalLiteral zero
  (Application (Builtin ListLength) A0, _, NonEmptyList as) -> NaturalLiteral (Natural.fromNat (Nonempty.size as))
  (Application (Builtin ListHead) A0, _, EmptyList A1) -> Application (Builtin DhallNone) A0
  (Application (Builtin ListHead) A0, _, NonEmptyList (Nonempty a _)) -> DhallSome a
  (Application (Builtin ListLast) A0, _, EmptyList A1) -> Application (Builtin DhallNone) A0
  (Application (Builtin ListLast) A0, _, NonEmptyList as) -> DhallSome (Nonempty.last as)
  (Application (Builtin ListIndexed) A0, _, EmptyList A1) -> EmptyList (Application (Builtin List) (RecordType [("index", Builtin Natural), ("value", A0)]))
  (Application (Builtin ListIndexed) A0, _, NonEmptyList (Nonempty a as)) ->
    combine : Nat ->{} Expression ->{} Expression
    combine ix value = RecordLiteral [("index", NaturalLiteral (Natural.fromNat ix)), ("value", value)]
    NonEmptyList (Nonempty (combine 0 a) (List.zipWith combine (List.range 1 (List.size as Nat.+ 1)) as))
  (Application (Builtin ListReverse) A0, _, EmptyList A1) -> EmptyList A1
  (Application (Builtin ListReverse) A0, _, NonEmptyList as) -> NonEmptyList (Nonempty.reverse as)
  (Builtin IntegerToDouble, _, IntegerLiteral n) -> DoubleLiteral (Integer.toDouble n)
  (Builtin IntegerShow, _, IntegerLiteral n) ->
    Expression.TextLiteral (Chunks [] (Integer.toText n))
  (Builtin IntegerNegate, _, IntegerLiteral n) ->
    IntegerLiteral (Integer.negate n)
  (Builtin IntegerClamp, _,  IntegerLiteral n) ->
    NaturalLiteral (Integer.clamp n)
  (Builtin DoubleShow, _, DoubleLiteral n) ->
    Expression.TextLiteral (Chunks [] (Float.toText n))
  (Lambda x A b0, a0, _) ->
    a1 = shift +1 x zero a0
    b1 = substitute b0 x zero a1
    b2 = shift -1 x zero b1
    betaNormalize b2
  (f, _, g') -> Application f g'

beta_normalization.betaNormalizeField : Expression -> Text -> Expression
beta_normalization.betaNormalizeField t x =
  t1 = betaNormalize t
  match t1 with
  RecordLiteral xvs -> match lookup x xvs with
    None -> Field t1 x
    Optional.Some v -> v
  ProjectByLabels t1 _xs -> betaNormalize (Field t1 x)
  Operator (RecordLiteral xvs) Prefer t1 -> match lookup x xvs with
    None -> betaNormalize (Field t1 x)
    Optional.Some v -> Field (Operator (RecordLiteral [(x, v)]) Prefer t1) x
  Operator t1 Prefer (RecordLiteral xvs) -> match lookup x xvs with
    None -> betaNormalize (Field t1 x)
    Optional.Some v -> v
  Operator (RecordLiteral xvs) CombineRecordTerms t1 -> match lookup x xvs with
    Optional.Some v -> Field (Operator (RecordLiteral [(x, v)]) CombineRecordTerms t1) x
    None -> betaNormalize (Field t1 x)
  Operator t1 CombineRecordTerms (RecordLiteral xvs) -> match lookup x xvs with
    Optional.Some v -> Field (Operator t1 CombineRecordTerms (RecordLiteral [(x, v)])) x
    None -> betaNormalize (Field t1 x)
  _ ->  Field t1 x

beta_normalization.betaNormalizeProjectByLabels : Expression -> [Text] -> Expression
beta_normalization.betaNormalizeProjectByLabels t xs = match (betaNormalize t, xs) with
  (_, []) -> RecordLiteral []
  (RecordLiteral xvs, _) -> RecordLiteral (filter (cases (x,v) -> x `elem` xs) xvs)
  (ProjectByLabels t1 _ys, _) -> betaNormalize (ProjectByLabels t1 xs)
  (Operator l Prefer (RecordLiteral rs), _) ->
    ks = List.map Tuple.at1 rs
    pred x = x `elem` ks
    betaNormalize (Operator (ProjectByLabels l (xs `without` ks)) Prefer (ProjectByLabels (RecordLiteral rs) (filter pred xs)))
  (t1, _) -> ProjectByLabels t1 (List.sortBy id xs)


beta_normalization.lookup : k -> [(k,v)] -> Optional v
beta_normalization.lookup k l = Optional.map Tuple.at2 (List.find (t -> (Tuple.at1 t) === k) l)
